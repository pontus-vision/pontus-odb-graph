---
rules:
  ADP_pole:
    vertices:
      - label: Person_Natural
        condition: "${CPF != null}"
        name: titular
        props:
          Full_Name:
            val: "${com.pontusvision.utils.Person.formatName(Nome, null, null)}"
            excludeFromSearch: true
#          Type:
#            val: "colaborador"
#            excludeFromSearch: true
          Customer_ID: "${CPF?.replaceAll('[^0-9]', '')}"
          Date_Of_Birth:
            val: "${Data_de_Nascimento_Idade?.replaceAll('\\\\.','/')?.trim()?:'01/01/1666'}"
            type: "java.util.Date"
            excludeFromSearch: true
            predicate: "eq" # equal to what ?!?!?

      - label: Person_Natural
        condition: "${Nome_da_Mae?.trim()?.length() > 0}"
        name: mae
        props:
          Full_Name: "${com.pontusvision.utils.Person.formatName(Nome_da_Mae, null, null)}"

      - label: Person_Natural
        condition: "${Nome_do_Pai?.trim()?.length() > 0}"
        name: pai
        props:
          Full_Name: "${com.pontusvision.utils.Person.formatName(Nome_do_Pai, null, null)}"

      - label: Person_Employee
        condition: "${Matricula != null}"
        name: colaborador
        props:
          ID: "${Matricula?.replaceAll('[^0-9]', '')}"
          Full_Name:
            val: "${com.pontusvision.utils.Person.formatName(Nome, null, null)}"
            excludeFromSearch: true
          Role:
            val: "${Funcao?.trim()?.toUpperCase()} ${Cargo?.trim()?.toUpperCase()}"
            excludeFromSearch: true
          Date_Of_Birth:
            val: "${Data_de_Nascimento_Idade?.replaceAll('\\\\.','/')?.trim()?:'01/01/1666'}}"
            type: "java.util.Date"
            excludeFromSearch: true

      - label: Person_Employee
        condition: "${Matricula_da_Chefia_Imediata?.replaceAll('[^0-9]', '')?.length() > 0}"
        name: chefe
        props:
          ID: "${Matricula_da_Chefia_Imediata?.replaceAll('[^0-9]', '')}"

      - label: Object_Identity_Card
        condition: "${RNE != null}" # since the field is expected to have an RNE value, we just check if it is empty or not
        name: rne
        props:
          Id_Value:
            val: "${RNE.replaceAll('[^0-9]','')}"
            mandatoryInSearch: true
          Id_Type:
            val: "RNE"
            excludeFromSearch: true

      - label: Object_Identity_Card
        condition: "${CPF != null}" # since the field is expected to have an RNE value, we just check if it is empty or not
        name: cpf
        props:
          Id_Value:
            val: "${CPF?.replaceAll('[^0-9]','')}"
            mandatoryInSearch: true
          Id_Type:
            val: "CPF"
            excludeFromSearch: true

      - label: Object_Identity_Card
        condition: "${Identidade___Orgao_Emissor___UF != null}" # same comment as the above
        name: rg
        props:
          Id_Value: "${Identidade___Orgao_Emissor___UF?.replaceAll('[^0-9]','')}"
          Id_Text:
            val: "${Identidade___Orgao_Emissor___UF}"
            excludeFromSearch: true
          Id_Type:
            val: "RG"
            excludeFromSearch: true

      - label: Object_Email_Address
        condition: "${(Email != null) && !(Email.isEmpty())}"
        name: email
        props:
          Email: "${Email?.trim()?.toLowerCase()}"

      - label: Object_Email_Address
        condition: "${(E_Mail_Opcional != null) && !(E_Mail_Opcional.isEmpty())}"
        name: email_opcional
        props:
          Email: "${E_Mail_Opcional?.trim()?.toLowerCase()}"

      - label: Location_Address
        props:
#         simplifying ... no ternary operator
          Full_Address:
            val: "${com.pontusvision.utils.LocationAddress.formatAddress(Tipo___Endereco, N_, Complemento, Bairro, Municipio02, 'Brasil', CEP)}"
            excludeFromSearch: true
#          Type:
#            val: "${(Domiciliado_no_Exterior=='Não')?'Endereço Brasil':'Endereço Exterior'}"
#            excludeFromSearch: true
          parser:
            val: "${Tipo___Endereco?.trim()?.toUpperCase()} ${N_?.trim()} ${Complemento?.trim()?.toUpperCase()}, ${Bairro?.trim()?.toUpperCase()} - ${Municipio02?.trim()?.toUpperCase()}, ${CEP?.trim()?.toUpperCase()}, BRASIL"
            type: "com.pontusvision.utils.LocationAddress"
          Post_Code: "${com.pontusvision.utils.PostCode.format(CEP)}"

      - label: Object_Phone_Number
        condition: "${Telefone?.replaceAll('[^0-9]', '')?.length() >= 7}"
        props:
          Raw:
            val: "${Telefone}"
#            mandatoryInSearch: false
#          Type:
#            val: "Telefone"
            excludeFromSearch: true
          Numbers_Only:
            val: "${(Telefone?.replaceAll('[^0-9]', '')?:'00000000')}"
            excludeFromSearch: true
          Last_7_Digits: "${(((Telefone?.replaceAll('[^0-9]', ''))?.length()>=7?(Telefone?.replaceAll('[^0-9]', '')):'0000000')[-7..-1])}"

      - label: Event_Ingestion
        props:
          Type:
            val: "ADP"
            excludeFromSearch: true
          Operation:
            val: "Structured Data Insertion"
            excludeFromSearch: true
          Metadata_Create_Date:
            val: "${new Date()}"
            excludeFromSearch: true
            type: java.util.Date

      - label: Object_Data_Source
        props:
          Name: "ADP"
#          Description: "Dados RH Colaboradores ADP"
#          Type: "Structured Data Insertion"

      - label: Event_Group_Ingestion
        props:
          Type: "ADP"
          Operation: "Structured Data Insertion"
          Ingestion_Date: "${new java.text.SimpleDateFormat('yyyy-MM-dd').format(new Date())}"
#          Metadata_Start_Date:
#            val: "${new Date()}"
#            excludeFromSearch: true
#            type: java.util.Date
#          Metadata_End_Date:
#            val: "${new Date()}"
#            excludeFromSearch: true
#            type: java.util.Date

    edges:
      - label: "Has_Ingestion_Event"
        fromVertexLabel: "Object_Data_Source"
        toVertexLabel: "Event_Group_Ingestion"

      - label: "Has_Ingestion_Event"
        fromVertexLabel: "Event_Group_Ingestion"
        toVertexLabel: "Event_Ingestion"

      - label: "Has_Ingestion_Event"
        fromVertexName: "titular"
        toVertexLabel: "Event_Ingestion"

      - label: "Is_Alias"
        fromVertexName: "titular"
        toVertexLabel: "colaborador"

      - label: "Is_Subordinate"
        fromVertexName: "colaborador"
        toVertexName: "chefe"

      - label: "Uses_Email"
        fromVertexName: "titular"
        toVertexName: "email"

      - label: "Uses_Email"
        fromVertexName: "titular"
        toVertexName: "email_opcional"

      - label: "Is_Located"
        fromVertexName: "titular"
        toVertexLabel: "Location_Address"

      - label: "Has_Id_Card"
        fromVertexName: "titular"
        toVertexName: "cpf"

      - label: "Has_Id_Card"
        fromVertexName: "titular"
        toVertexName: "rg"

      - label: "Has_Id_Card"
        fromVertexName: "titular"
        toVertexName: "rne"

      - label: "Has_Phone"
        fromVertexName: "titular"
        toVertexLabel: "Object_Phone_Number"

      - label: "Is_Family"
        fromVertexName: "titular"
        toVertexName: "mae"

      - label: "Is_Family"
        fromVertexName: "titular"
        toVertexName: "pai"
