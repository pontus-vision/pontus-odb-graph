
rules:

  Cliente_SAP_PosVenda_POLARIS:
    vertices:
      - label: Person_Natural
        condition: "${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 11}" #--for CPF
        #        condition: "${Title != 'Company'}"
        props:
          Full_Name: "${Name_1?.trim()?.toUpperCase()}${Name_2?.trim()?' ':''}${Name_2?.trim()?.toUpperCase()}"
          #          Full_Name_fuzzy: "${Name_1?.toUpperCase()?.trim()}"

          Customer_ID: "${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11?Tax_Number_1?.replaceAll('[^0-9]', ''):Tax_Number_2?.replaceAll('[^0-9]', '')}"
          #          id: "${Customer}"
#          Type:
#            val: "Clientes"
#            excludeFromSearch: true

      - label: Object_Identity_Card
        condition: "${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 11}"
        props:
          Id_Value:
            val: "${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11?Tax_Number_1?.replaceAll('[^0-9]', ''):Tax_Number_2?.replaceAll('[^0-9]', '')}"
            mandatoryInSearch: true
          Id_Type:
            val: "CPF"
            excludeFromSearch: true


      - label: Person_Organisation
        condition: "${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 14 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 14}"
        props:
          Registration_Number: "${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 14?Tax_Number_1?.replaceAll('[^0-9]', ''):Tax_Number_2?.replaceAll('[^0-9]', '')}"
          Id: "${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 14?Tax_Number_1?.replaceAll('[^0-9]', ''):Tax_Number_2?.replaceAll('[^0-9]', '')}"
          Name: "${Name_1?.trim()?.toUpperCase()} ${Name_2?.trim()?.toUpperCase()}"

      #  For Clientes Sem Tax
      - label: Person_Natural
        condition: "${!(Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 11 || Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 14 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 14)}"
     # NOT needed; existem entradas c/ISENTO (Tax_Number_1?.trim()?.matches('.*[a-zA-Z]+.*') || Tax_Number_2?.trim()?.matches('.*[a-zA-Z]+.*'))}"
        props:
          Full_Name: "${Name_1?.trim()?.toUpperCase()}${Name_2?.trim()?' ':''}${Name_2?.trim()?.toUpperCase()}"
          Customer_ID: "${Customer}"
#          Type:
#            val: "Clientes Sem Tax"
#            excludeFromSearch: true

      - label: Object_Phone_Number
        name: phone
        condition: "${Telephone_1?.trim()?.length() > 0}"
        props:
          Raw:
            val: "${Telephone_1}"
#            mandatoryInSearch: false  --> doesnt work
            excludeFromSearch: true
#          Type:
#            val: "Cliente"
#            excludeFromSubsequenceSearch: true
          Numbers_Only:
            val: "${(Telephone_1?.replaceAll('[^0-9]', '')?:'00000000')}"
            excludeFromSearch: true
            type: "[Ljava.lang.String;"
#         We forgot to check if the Phone number had at least 7 digits [?.length()>=7]
          Last_7_Digits:
            val: "${(((Telephone_1?.replaceAll('[^0-9]', ''))?.length()>=7?(Telephone_1?.replaceAll('[^0-9]', '')):'0000000')[-7..-1])}"
            mandatoryInSearch: true
            type: "[Ljava.lang.String;"

      - label: Object_Phone_Number
        condition: "${Telephone_2?.trim()?.length() > 0}"
        name: phone2
        props:
          Raw:
            val: "${Telephone_2}"
#            mandatoryInSearch: false --> doesnt work
            excludeFromSearch: true
#          Type:
#            val: "Cliente"
#            excludeFromSubsequenceSearch: true
          Numbers_Only:
            val: "${(Telephone_2?.replaceAll('[^0-9]', '')?:'00000000')}"
            excludeFromSearch: true
            type: "[Ljava.lang.String;"

          Last_7_Digits:
            val: "${(((Telephone_2?.replaceAll('[^0-9]', ''))?.length()>=7?(Telephone_2?.replaceAll('[^0-9]', '')):'0000000')[-7..-1])}"
            mandatoryInSearch: true
            type: "[Ljava.lang.String;"

      - label: Location_Address
        props:
          Full_Address:
            val: "${ ((Street?:'')+ '\\\\n' + (City?:'') + '\\\\n' + (District?:'') + '\\\\n' + (Cty?:'')).replaceAll('\\\\n', ' ')}"
            mandatoryInSearch: true

          parser:
            val: "${ ((Street?:'')+ '\\\\n' + (City?:'') + '\\\\n' + (District?:'') + '\\\\n' + (Cty?:'')).replaceAll('\\\\n', ' ')}"
            mandatoryInSearch: true
            type: "com.pontusvision.utils.LocationAddress"

#          Post_Code:
#            val: "${com.pontusvision.utils.PostCode.format(PostalCode)}"
#            excludeFromSearch: true

      - label: Event_Ingestion
        props:
          Type:
            val: sap/clientes
            excludeFromSearch: true
          Operation:
            val: Structured Data Insertion
            excludeFromSearch: true
          Domain_b64:
            val: "${original_request?.bytes?.encodeBase64()?.toString()}"
            excludeFromSearch: true
          Metadata_Create_Date:
            val: "${new Date()}" # Date COLUMN
            excludeFromSearch: true
            type: java.util.Date
          Metadata_Update_Date:
            val: "${new Date()}"
            excludeFromSearch: true
            type: java.util.Date

      - label: Event_Group_Ingestion
        props:
          Type: sap/clientes
          Operation: Structured Data Insertion
          Ingestion_Date: "${new java.text.SimpleDateFormat('yyyy-MM-dd').format(new Date())}"
#          Metadata_Start_Date:
#            val: "${new Date()}"
#            #            mandatoryInSearch: false
#            excludeFromSearch: true
#            type: java.util.Date
#          Metadata_End_Date:
#            val: "${new Date()}"
#            excludeFromSearch: true
#            type: java.util.Date

      - label: Object_Data_Source
        props:
          Name: SAP/CLIENTES
#          Type: sap/clientes
#          Description: Registros de Clientes no Polaris/SAP

    edges:
      - label: "Is_Located"
        fromVertexLabel: "Person_Organisation"
        toVertexLabel: "Location_Address"

      - label: "Is_Located"
        fromVertexLabel: "Person_Natural"
        toVertexLabel: "Location_Address"

      - label: "Has_Ingestion_Event"
        fromVertexLabel: "Person_Organisation"
        toVertexLabel: "Event_Ingestion"

      - label: "Has_Ingestion_Event"
        fromVertexLabel: "Person_Natural"
        toVertexLabel: "Event_Ingestion"

      - label: "Has_Ingestion_Event"
        fromVertexLabel: "Event_Group_Ingestion"
        toVertexLabel: "Event_Ingestion"

      - label: "Has_Ingestion_Event"
        toVertexLabel: "Event_Group_Ingestion"
        fromVertexLabel: "Object_Data_Source"

      - label: "Has_Phone"
        fromVertexLabel: "Person_Organisation"
        toVertexName: "phone"

      - label: "Has_Phone"
        fromVertexLabel: "Person_Organisation"
        toVertexName: "phone2"

      - label: "Has_Phone"
        fromVertexLabel: "Person_Natural"
        toVertexName: "phone"

      - label: "Has_Phone"
        fromVertexLabel: "Person_Natural"
        toVertexName: "phone2"

      - label: "Has_Identity_Card"
        fromVertexLabel: "Person_Natural"
        toVertexLabel: "Object_Identity_Card"

  Fornecedor_SAP_PosVenda_POLARIS:
    vertices:
      - label: Person_Natural
        condition: "${(Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 11)}"
        props:
          Full_Name: "${Name_1?.trim()?.toUpperCase()}${Name_2?.trim()?' ':''}${Name_2?.trim()?.toUpperCase()}"
          Customer_ID: "${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11?Tax_Number_1?.replaceAll('[^0-9]', ''):Tax_Number_2?.replaceAll('[^0-9]', '')}"
#          Type:
#            val: "Fornecedores"
#            excludeFromSearch: true

      - label: Object_Identity_Card
        condition: "${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 11}"
        props:
          Id_Value:
            val: "${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11?Tax_Number_1?.replaceAll('[^0-9]',''):Tax_Number_2?.replaceAll('[^0-9]', '')}"
            mandatoryInSearch: true
          Id_Type:
            val: "CPF"
            excludeFromSearch: true

      - label: Person_Organisation
        condition: "${Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 14 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 14}"
        props:
          Registration_Number: "${Tax_Number_1?.replaceAll('[^0-9]', '') || Tax_Number_2?.replaceAll('[^0-9]', '')}"
          Id: "${Tax_Number_1?.replaceAll('[^0-9]', '') || Tax_Number_2?.replaceAll('[^0-9]', '')}"
          Name: "${Name_1?.trim()?.toUpperCase()} ${Name_2?.trim()?.toUpperCase()}"

      #     For FOREIGN Persons
      - label: Person_Natural
        condition: "${!(Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 11 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 11 || Tax_Number_1?.replaceAll('[^0-9]', '')?.length() == 14 || Tax_Number_2?.replaceAll('[^0-9]', '')?.length() == 14)}"
        props:
          Full_Name: "${Name_1?.trim()?.toUpperCase()}${Name_2?.trim()?' ':''}${Name_2?.trim()?.toUpperCase()}"
          Customer_ID: "${Vendor}"
#          Type:
#            val: "Fornecedores Sem Tax"
#            excludeFromSearch: true

      #         Ethnicity:
      #         Nationality:


      - label: Object_Phone_Number
        name: phone
        condition: "${Telephone_1?.trim()?.length() > 0}"
        props:
          Raw:
            val: "${Telephone_1}"
#            mandatoryInSearch: false --> doesnt work
            excludeFromSearch: true
#          Type:
#            val: "Fornecedor"
#            excludeFromSubsequenceSearch: true
          Numbers_Only:
            val: "${(Telephone_1?.replaceAll('[^0-9]', '')?:'00000000')}"
            excludeFromSearch: true
            type: "[Ljava.lang.String;"

          Last_7_Digits:
            val: "${(((Telephone_1?.replaceAll('[^0-9]', ''))?.length()>=7?(Telephone_1?.replaceAll('[^0-9]', '')):'0000000')[-7..-1])}"
            mandatoryInSearch: true
            type: "[Ljava.lang.String;"

      - label: Object_Phone_Number
        condition: "${Telephone_2?.trim()?.length() > 0}"
        name: phone2
        props:
          Raw:
            val: "${Telephone_2}"
#            mandatoryInSearch: false
            excludeFromSearch: true
#          Type:
#            val: "Fornecedor"
#            excludeFromSubsequenceSearch: true
          Numbers_Only:
            val: "${(Telephone_2?.replaceAll('[^0-9]', '')?:'00000000')}"
            excludeFromSearch: true
            type: "[Ljava.lang.String;"

          Last_7_Digits:
            val: "${(((Telephone_2?.replaceAll('[^0-9]', ''))?.length()>=7?(Telephone_2?.replaceAll('[^0-9]', '')):'0000000')[-7..-1])}"
            mandatoryInSearch: true
            type: "[Ljava.lang.String;"

      - label: Location_Address
        props:
          Full_Address:
            val: "${ ((Street?:'')+ '\\\\n' + (City?:'') + '\\\\n' + (District?:'') + '\\\\n' + (Cty?:'')).replaceAll('\\\\n', ' ')}"
            mandatoryInSearch: true

          parser:
            val: "${ ((Street?:'')+ '\\\\n' + (City?:'') + '\\\\n' + (District?:'') + '\\\\n' + (Cty?:'')).replaceAll('\\\\n', ' ')}"
            mandatoryInSearch: true
            type: "com.pontusvision.utils.LocationAddress"

#          Post_Code:
#            val: "${com.pontusvision.utils.PostCode.format(PostalCode)}"
#            excludeFromSearch: true

      - label: Event_Ingestion
        props:
          Type:
            val: sap/fornecedores
            excludeFromSearch: true
          Operation:
            val: Structured Data Insertion
            excludeFromSearch: true
          Domain_b64:
            val: "${original_request?.bytes?.encodeBase64()?.toString()}"
            excludeFromSearch: true
          Metadata_Create_Date:
            val: "${new Date()}" # Date COLUMN
            excludeFromSearch: true
            type: java.util.Date
          Metadata_Update_Date:
            val: "${new Date()}"
            excludeFromSearch: true
            type: java.util.Date

      - label: Event_Group_Ingestion
        props:
          Type: sap/fornecedores
          Operation: "Structured Data Insertion"
          Ingestion_Date: "${new java.text.SimpleDateFormat('yyyy-MM-dd').format(new Date())}"
#          Metadata_Start_Date:
#            val: "${new Date()}"
#            #            mandatoryInSearch: false
#            excludeFromSearch: true
#            type: java.util.Date
#          Metadata_End_Date:
#            val: "${new Date()}"
#            excludeFromSearch: true
#            type: java.util.Date


      - label: Object_Data_Source
        props:
          Name: SAP/FORNECEDORES
#          Type: sap/fornecedores
#          Description: Registros de Fornecedores no Polaris/SAP

    edges:
      - label: "Is_Located"
        fromVertexLabel: "Person_Organisation"
        toVertexLabel: "Location_Address"

      - label: "Is_Located"
        fromVertexLabel: "Person_Natural"
        toVertexLabel: "Location_Address"

      - label: "Has_Ingestion_Event"
        fromVertexLabel: "Person_Organisation"
        toVertexLabel: "Event_Ingestion"

      - label: "Has_Ingestion_Event"
        fromVertexLabel: "Person_Natural"
        toVertexLabel: "Event_Ingestion"

      - label: "Has_Ingestion_Event"
        fromVertexLabel: "Event_Group_Ingestion"
        toVertexLabel: "Event_Ingestion"

      - label: "Has_Ingestion_Event"
        toVertexLabel: "Event_Group_Ingestion"
        fromVertexLabel: "Object_Data_Source"

      - label: "Has_Phone"
        fromVertexLabel: "Person_Organisation"
        toVertexName: "phone"

      - label: "Has_Phone"
        fromVertexLabel: "Person_Organisation"
        toVertexName: "phone2"

      - label: "Has_Phone"
        fromVertexLabel: "Person_Natural"
        toVertexName: "phone"

      - label: "Has_Phone"
        fromVertexLabel: "Person_Natural"
        toVertexName: "phone2"

      - label: "Has_Identity_Card"
        fromVertexLabel: "Person_Natural"
        toVertexLabel: "Object_Identity_Card"


