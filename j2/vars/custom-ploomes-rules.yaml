rules:

  # TODO: 2 IDs @ Person.Organisation (Id & Registration_Number)

  ploomes_clientes:
    vertices:
      - label: Person.Natural
#        TODO: Sometimes LegalName can be null ... sometimes its Name that is null ... CPF was taken out because it is usually null
        condition: "${TypeId == 2 && (LegalName != null || Name != null)}"
        props:
          Full_Name:
            val: "${(Name?.trim()?.length() > 0)?Name?.trim()?.toUpperCase():LegalName?.trim()?.toUpperCase()}"
            excludeFromUpdate: true
          Customer_ID: "${CPF?.replaceAll('[^0-9]', '')}"
#          Type:
#            val: "Clientes"
#            excludeFromSearch: true

      - label: Person.Organisation
#        TODO: Sometimes LegalName can be null ... sometimes its Name that is null ... CPF was taken out because it is usually null
        condition: "${TypeId == 1 && (LegalName != null || Name != null)}"
        props:
          Registration_Number: "${CNPJ?.replaceAll('[^0-9]', '')}"
          Name:
            val: "${(LegalName?.trim()?.length() > 0)?LegalName?.trim()?.toUpperCase():Name?.trim()?.toUpperCase()}"
            excludeFromUpdate: true
          Id: "${CNPJ?.replaceAll('[^0-9]', '')}"
#          Email:
#            val: "${Email?.trim()?.toLowerCase()}"
#            excludeFromUpdate: true

      - label: Object.Identity_Card
        condition: "${TypeId == 2  && CPF != null}"
        name: cpf
        props:
          Id_Value: "${CPF?.replaceAll('[^0-9]', '')}"
          Id_Type:
            val: "CPF"
            excludeFromSearch: true

      - label: Object.Identity_Card
        condition: "${TypeId == 1  && CNPJ != null}"
        name: cnpj
        props:
          Id_Value: "${CNPJ?.replaceAll('[^0-9]', '')}"
          Id_Type:
            val: "CNPJ"
            excludeFromSearch: true

      # EMAIL
      - label: Object.Email_Address
        condition: "${Email?.trim()?.length() > 0 }"
        props:
          Email: "${Email?.trim()?.toLowerCase()}"

#      TODO: Os registros na Ploomes não tem dado algum ou insuficiente ou apenas dados de id para endereço ... por isso não terá vertex Location
#      - label: Location.Address
##        condition: "${StreetAddress != null}"
#        props:
#          Full_Address:
#            val: "${StreetAddress?.toUpperCase()}, ${Neighborhood?.toUpperCase()}, ${CityId?.toUpperCase()} - ${StateId?.toUpperCase()}, ${ZipCode}"
#            excludeFromSearch: true
##          Type:
##            val: "Business"
##            excludeFromSearch: true
#          parser:
#            val: "${StreetAddress?.toUpperCase()}, ${Neighborhood?.toUpperCase()}, ${CityId?.toUpperCase()} - ${StateId?.toUpperCase()}, ${ZipCode}"
#            type: "com.pontusvision.utils.LocationAddress"
#          Post_Code: "${com.pontusvision.utils.PostCode.format(ZipCode)}"

      - label: Event.Ingestion
        props:
          Type:
            val: "ploomes/clientes"
            excludeFromSearch: true
          Operation:
            val: "Structured Data Insertion"
            excludeFromSearch: true
          Domain_b64:
            val: "${original_request?.bytes?.encodeBase64()?.toString()}"
            excludeFromSearch: true
          Metadata_Create_Date:
            val: "${CreateDate}"
            excludeFromSearch: true
            type: java.util.Date
          Metadata_Update_Date:
            val: "${LastUpdateDate}"
            excludeFromSearch: true
            type: java.util.Date

      - label: Event.Group_Ingestion
        props:
          Type: "ploomes/clientes"
          Operation: "Structured Data Insertion"
          Ingestion_Date: "${new java.text.SimpleDateFormat('yyyy-MM-dd').format(new Date())}"
          Metadata_Start_Date:
            val: "${new Date()}"
            excludeFromSearch: true
            type: java.util.Date
          Metadata_End_Date:
            val: "${new Date()}"
            excludeFromSearch: true
            type: java.util.Date

      - label: Object.Data_Source
        props:
          Name: "PLOOMES/CLIENTES"
#          Type: ploomes/clientes
#          Description: Registros de Clientes no protheus/Totvs
    edges:
      - label: Has_Ingestion_Event
        toVertexLabel: "Event.Group_Ingestion"
        fromVertexLabel: "Object.Data_Source"

      - label: Has_Ingestion_Event
        fromVertexLabel: "Event.Group_Ingestion"
        toVertexLabel: "Event.Ingestion"

      - label: Has_Ingestion_Event
        fromVertexLabel: "Person.Natural"
        toVertexLabel: "Event.Ingestion"

      - label: Has_Ingestion_Event
        fromVertexLabel: "Person.Organisation"
        toVertexLabel: "Event.Ingestion"

      - label: Uses_Email
        fromVertexLabel: "Person.Natural"
        toVertexLabel: "Object.Email_Address"

      - label: Uses_Email
        fromVertexLabel: "Person.Organisation"
        toVertexLabel: "Object.Email_Address"

      - label: Has_Id_Card
        fromVertexLabel: "Person.Natural"
        toVertexName: "cpf"

      - label: Has_Id_Card
        fromVertexLabel: "Person.Organisation"
        toVertexName: "cnpj"

#      - label: Is_Located
#        fromVertexLabel: "Person.Natural"
#        toVertexLabel: "Location.Address"
#
#      - label: Is_Located
#        fromVertexLabel: "Person.Organisation"
#        toVertexLabel: "Location.Address"
